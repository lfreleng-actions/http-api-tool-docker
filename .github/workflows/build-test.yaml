---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

name: 'Build/Test and Publish Docker Image'

on:
  workflow_dispatch:
  push:
    branches: [ 'main' ]
  pull_request:
    branches: [ 'main' ]

permissions: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Build Docker image with comprehensive caching
  docker-build:
    name: "Build Docker Image"
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    outputs:
      image-tag: ${{ steps.build.outputs.imageid }}

    steps:
      # Harden the runner
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Set up Docker Buildx with caching
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      # Build Docker image with registry cache
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: false
          load: true
          tags: http-api-tool:test
          cache-from: |
            type=gha,scope=docker-build
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-base
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-deps
          cache-to: type=gha,mode=max,scope=docker-build
          labels: |
            org.opencontainers.image.title=HTTP API Tool
            org.opencontainers.image.description=A Python HTTP/HTTPS API testing tool
            org.opencontainers.image.vendor=The Linux Foundation

      # Test basic image functionality
      - name: Test Docker image help
        run: |
          docker run --rm http-api-tool:test --help

  # Integration tests
  integration-tests:
    name: "Integration Tests"
    runs-on: ubuntu-latest
    needs: docker-build
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Set up go-httpbin for testing
      - name: Setup go-httpbin HTTPS service
        uses: ./.github/actions/go-httpbin
        id: go-httpbin
        with:
          debug: 'true'
          port: '8080'

      # Test 1: Basic GET request
      - name: Test Basic GET request
        uses: ./
        with:
          url: 'https://${{ steps.go-httpbin.outputs.host-gateway-ip }}:8080/get'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true
          expected_http_code: 200

      # Test 2: POST request with JSON
      - name: Test POST request with JSON
        uses: ./
        with:
          url: 'https://${{ steps.go-httpbin.outputs.host-gateway-ip }}:8080/post'
          http_method: 'POST'
          request_body: '{"test": "data", "number": 42}'
          content_type: 'application/json'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true
          expected_http_code: 200

      # Test 3: Custom headers
      - name: Test Custom headers
        uses: ./
        with:
          url: 'https://${{ steps.go-httpbin.outputs.host-gateway-ip }}:8080/headers'
          request_headers: '{"X-Test-Header": "test-value", "X-API-Key": "secret123"}'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true
          expected_http_code: 200

      # Test 4: Error handling (404)
      - name: Test Error handling (404)
        uses: ./
        with:
          url: 'https://${{ steps.go-httpbin.outputs.host-gateway-ip }}:8080/status/404'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true
          expected_http_code: 404

      # Test 5: Error handling (500)
      - name: Test Error handling (500)
        uses: ./
        with:
          url: 'https://${{ steps.go-httpbin.outputs.host-gateway-ip }}:8080/status/500'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true
          expected_http_code: 500

      # Clean up is handled automatically by the go-httpbin action

  # Publish to GHCR (only after successful tests)
  docker-publish:
    name: "Publish to GHCR"
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: github.event_name != 'pull_request'
    timeout-minutes: 10
    permissions:
      contents: read
      packages: write

    steps:
      # Harden the runner
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      # Login to GitHub Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata for tags and labels
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=HTTP API Tool
            org.opencontainers.image.description=A Python HTTP/HTTPS API testing tool for GitHub Actions and CLI usage
            org.opencontainers.image.vendor=The Linux Foundation

      # Build and push image with comprehensive caching
      - name: Build and push Docker image
        uses: docker/build-push-action@48aba3b46d1b1fec4febb7c5d0c644b249a11355 # v6.10.0
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: |
            type=gha,scope=docker-publish
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-base
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-deps
          cache-to: |
            type=gha,mode=max,scope=docker-publish
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-base,mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:cache-deps,mode=max

      - name: Verify published image
        run: |
          echo "Image published successfully to GHCR"
          echo "Tags: ${{ steps.meta.outputs.tags }}"

  # Python build for additional testing (runs in parallel with container pipeline)
  python-build:
    name: 'Python Build'
    runs-on: 'ubuntu-latest'
    outputs:
      matrix_json: "${{ steps.python-build.outputs.matrix_json }}"
      artefact_name: "${{ steps.python-build.outputs.artefact_name }}"
      artefact_path: "${{ steps.python-build.outputs.artefact_path }}"
    permissions:
      contents: read
    timeout-minutes: 12
    env:
      GH_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
    steps:
      # Harden the runner used by this workflow
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: 'audit'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Setup Python with enhanced caching
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-docker.txt
            pyproject.toml

      # Cache PDM dependencies
      - name: Cache PDM dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pdm
            .pdm-python
            .venv
          key: pdm-${{ runner.os }}-python-3.11-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
          restore-keys: |
            pdm-${{ runner.os }}-python-3.11-
            pdm-${{ runner.os }}-

      - name: 'Build Python project'
        id: python-build
        # yamllint disable-line rule:line-length
        uses: lfreleng-actions/python-build-action@a9d0ef8a2324ac76e798ad6dc306f08b83b5b213 # v0.1.11

  # Python tests with matrix strategy (after container pipeline)
  python-tests:
    name: 'Python Tests'
    runs-on: 'ubuntu-latest'
    needs: [integration-tests, python-build]
    # Matrix job
    strategy:
      fail-fast: false
      matrix: "${{ fromJson(needs.python-build.outputs.matrix_json) }}"
    permissions:
      contents: read
    timeout-minutes: 12
    steps:
      # Harden the runner used by this workflow
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Setup Python with comprehensive caching
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-docker.txt
            pyproject.toml

      # Cache PDM dependencies for test environment
      - name: Cache PDM test dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pdm
            .pdm-python
            .venv
          key: pdm-test-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
          restore-keys: |
            pdm-test-${{ runner.os }}-python-${{ matrix.python-version }}-
            pdm-test-${{ runner.os }}-

      - name: "Python tests [pytest] ${{ matrix.python-version }}"
        # yamllint disable-line rule:line-length
        uses: lfreleng-actions/python-test-action@6b2c188df0f236834aea94810ecbf3bec2a564f9 # v0.1.8
        with:
          python_version: ${{ matrix.python-version }}

  # Python dependency auditing (after container pipeline)
  python-audit:
    name: 'Python Audit'
    runs-on: 'ubuntu-latest'
    needs: [integration-tests, python-build]
    # Matrix job
    strategy:
      fail-fast: false
      matrix: "${{ fromJson(needs.python-build.outputs.matrix_json) }}"
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      # Harden the runner used by this workflow
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: 'audit'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Setup Python with comprehensive caching
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements-docker.txt
            pyproject.toml

      # Cache PDM dependencies for audit environment
      - name: Cache PDM audit dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pdm
            .pdm-python
            .venv
          key: pdm-audit-${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
          restore-keys: |
            pdm-audit-${{ runner.os }}-python-${{ matrix.python-version }}-
            pdm-audit-${{ runner.os }}-

      - name: "Audit dependencies ${{ matrix.python-version }}"
        # yamllint disable-line rule:line-length
        uses: lfreleng-actions/python-audit-action@0637cc9f40984b46bec578631fbac2a354eebabd # v0.1.5
        with:
          python_version: "${{ matrix.python-version }}"

  # Makefile tests (after container pipeline)
  makefile-tests:
    name: 'Makefile Tests'
    runs-on: ubuntu-latest
    needs: [integration-tests, python-build]
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      # Harden the runner used by this workflow
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: 'audit'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Setup Python with comprehensive caching
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-docker.txt
            pyproject.toml

      # Cache PDM dependencies for makefile tests
      - name: Cache PDM makefile dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pdm
            .pdm-python
            .venv
          key: pdm-makefile-${{ runner.os }}-python-3.11-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
          restore-keys: |
            pdm-makefile-${{ runner.os }}-python-3.11-
            pdm-makefile-${{ runner.os }}-

      - name: Install PDM
        run: pip install pdm==2.24.2

      - name: Test Makefile targets
        run: |
          # Test basic make targets
          make install-test
          make test

          # Test help target
          make help

      - name: Test make docker-build
        run: |
          # Test Docker build via Makefile
          make docker-build

  # CLI integration tests (after container pipeline)
  cli-tests:
    name: 'CLI Integration Tests'
    runs-on: ubuntu-latest
    needs: [integration-tests, python-build]
    permissions:
      contents: read
    timeout-minutes: 15
    steps:
      # Harden the runner used by this workflow
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: 'audit'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Setup Python with comprehensive caching
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            requirements-docker.txt
            pyproject.toml

      # Cache PDM dependencies for CLI tests
      - name: Cache PDM CLI dependencies
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: |
            ~/.cache/pdm
            .pdm-python
            .venv
          key: pdm-cli-${{ runner.os }}-python-3.11-${{ hashFiles('pyproject.toml', 'pdm.lock') }}
          restore-keys: |
            pdm-cli-${{ runner.os }}-python-3.11-
            pdm-cli-${{ runner.os }}-

      - name: Install PDM and dependencies
        run: |
          pip install pdm==2.24.2
          pdm install -G test

      - name: Test CLI help and version
        run: |
          # Test CLI help
          pdm run python -m http_api_tool --help

          # Test specific command help
          pdm run python -m http_api_tool test --help

      # Start go-httpbin service for testing
      - name: Setup go-httpbin service
        id: go-httpbin
        uses: ./.github/actions/go-httpbin
        with:
          port: '8080'
          debug: 'true'

      - name: Test CLI with various scenarios
        run: |
          # Use the HTTPS service URL and CA bundle from the go-httpbin action
          SERVICE_URL="${{ steps.go-httpbin.outputs.service-url }}"
          CA_BUNDLE="${{ steps.go-httpbin.outputs.ca-cert-path }}"

          echo "Testing with service URL: $SERVICE_URL"
          echo "Using CA bundle: $CA_BUNDLE"

          # Test basic GET request
          pdm run python -m http_api_tool test \
            --url "$SERVICE_URL/get" \
            --http-method GET \
            --expected-http-code 200 \
            --ca-bundle-path "$CA_BUNDLE" \
            --debug \
            --retries 3

          # Test POST request with JSON
          pdm run python -m http_api_tool test \
            --url "$SERVICE_URL/post" \
            --http-method POST \
            --expected-http-code 200 \
            --request-body '{"test": "data"}' \
            --content-type "application/json" \
            --ca-bundle-path "$CA_BUNDLE" \
            --debug

          # Test with headers
          pdm run python -m http_api_tool test \
            --url "$SERVICE_URL/headers" \
            --http-method GET \
            --expected-http-code 200 \
            --request-headers '{"X-Custom-Header": "test-value"}' \
            --ca-bundle-path "$CA_BUNDLE" \
            --debug

          # Test with authentication (if supported)
          pdm run python -m http_api_tool test \
            --url "$SERVICE_URL/basic-auth/user/pass" \
            --http-method GET \
            --expected-http-code 401 \
            --ca-bundle-path "$CA_BUNDLE" \
            --debug || echo "Expected 401 for unauth request"

      - name: Test CLI error handling
        run: |
          # Test with invalid URL (should fail gracefully)
          pdm run python -m http_api_tool test \
            --url "https://localhost:9999/nonexistent" \
            --http-method GET \
            --expected-http-code 200 \
            --retries 1 \
            --debug || echo "Expected failure for invalid URL"

      - name: Clean up test containers
        if: always()
        run: |
          docker rm -f go-httpbin || true

  # GitHub Action functionality tests (after container pipeline)
  action-tests:
    name: 'GitHub Action Tests'
    runs-on: ubuntu-latest
    needs: [integration-tests]
    permissions:
      contents: read
    timeout-minutes: 10
    steps:
      # Harden the runner used by this workflow
      - uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: 'audit'

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Start go-httpbin service for testing
      - name: Setup go-httpbin service
        id: go-httpbin
        uses: ./.github/actions/go-httpbin
        with:
          port: '8080'
          debug: 'true'

      - name: Test GitHub Action (local)
        uses: ./
        with:
          url: '${{ steps.go-httpbin.outputs.service-url }}/get'
          service_name: 'HTTPBin Test Service'
          expected_http_code: 200
          retries: 3
          initial_sleep_time: 1
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'

      - name: Test GitHub Action with POST
        uses: ./
        with:
          url: '${{ steps.go-httpbin.outputs.service-url }}/post'
          service_name: 'HTTPBin POST Test'
          http_method: 'POST'
          expected_http_code: 200
          request_body: '{"test": "data"}'
          content_type: 'application/json'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'

      - name: Test GitHub Action error handling
        uses: ./
        continue-on-error: true
        with:
          url: 'https://localhost:9999/nonexistent'
          service_name: 'Non-existent Service'
          expected_http_code: 200
          retries: 1

      - name: Clean up test containers
        if: always()
        run: |
          docker rm -f go-httpbin || true

  # Docker integration test for PRs (using GitHub Action instead of Docker CLI)
  docker-integration-test-pr:
    name: 'Docker Integration Test (PR)'
    runs-on: ubuntu-latest
    needs: [integration-tests, python-tests, python-audit, makefile-tests, cli-tests, action-tests]
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
    timeout-minutes: 15

    steps:
      # Harden the runner used by this workflow
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Start go-httpbin service for testing
      - name: Setup go-httpbin service
        id: go-httpbin
        uses: ./.github/actions/go-httpbin
        with:
          port: '8080'
          debug: 'true'

      # Test Docker integration via GitHub Action (no Docker CLI dependency)
      - name: Test Docker integration via GitHub Action
        uses: ./
        with:
          url: '${{ steps.go-httpbin.outputs.service-url }}/get'
          service_name: 'Docker Integration Test (PR)'
          expected_http_code: 200
          retries: 3
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true

      # Test additional Docker integration scenarios via GitHub Action
      - name: Test Docker integration with POST
        uses: ./
        with:
          url: '${{ steps.go-httpbin.outputs.service-url }}/post'
          service_name: 'Docker Integration POST Test (PR)'
          http_method: 'POST'
          expected_http_code: 200
          request_body: '{"integration": "test", "pr": true}'
          content_type: 'application/json'
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true

      # Test Docker integration with custom headers
      - name: Test Docker integration with headers
        uses: ./
        with:
          url: '${{ steps.go-httpbin.outputs.service-url }}/headers'
          service_name: 'Docker Integration Headers Test (PR)'
          request_headers: '{"X-Integration-Test": "docker-pr", "X-Test-Type": "headers"}'
          expected_http_code: 200
          ca_bundle_path: '${{ steps.go-httpbin.outputs.ca-cert-path }}'
          debug: true

      # Clean up test containers
      - name: Clean up test containers
        if: always()
        run: |
          docker rm -f go-httpbin || true

  # Comprehensive Docker integration tests (after container pipeline and all other tests)
  docker-integration-test:
    name: 'Docker Integration Test'
    runs-on: ubuntu-latest
    needs: [docker-publish, python-tests, python-audit, makefile-tests, cli-tests, action-tests]
    if: github.event_name != 'pull_request'
    permissions:
      contents: read
      packages: read
    timeout-minutes: 15

    steps:
      # Harden the runner used by this workflow
      - name: Harden Runner
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0

      # Login to Container Registry
      - name: Login to Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Test Docker image functionality
      - name: Test Docker image functionality
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Testing published image: $IMAGE_TAG"

          # Test basic help command
          docker run --rm "$IMAGE_TAG" --help

      # Start go-httpbin service for testing
      - name: Setup go-httpbin service
        id: go-httpbin
        uses: ./.github/actions/go-httpbin
        with:
          port: '8080'
          debug: 'true'

      - name: Test Docker image with go-httpbin
        run: |
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "Using image tag: $IMAGE_TAG"

          # Get service URL and CA bundle from go-httpbin action
          SERVICE_URL="${{ steps.go-httpbin.outputs.service-url }}"
          CA_BUNDLE="${{ steps.go-httpbin.outputs.ca-cert-path }}"

          # Test the http-api-tool against go-httpbin with HTTPS
          docker run --rm --network host \
            -v "$GITHUB_WORKSPACE/$CA_BUNDLE:/tmp/ca-bundle.pem:ro" \
            "$IMAGE_TAG" \
            test \
            --url "$SERVICE_URL/get" \
            --ca-bundle-path "/tmp/ca-bundle.pem" \
            --debug \
            --retries 3

      - name: Clean up test containers
        if: always()
        run: |
          docker rm -f go-httpbin || true
